/*
 * Pravega Schema Registry APIs
 * REST APIs for Pravega Schema Registry.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.pravega.schemaregistry.contract.generated.rest.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.pravega.schemaregistry.contract.generated.rest.model.VersionInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/**
 * BackwardPolicy compatibility which tells the service to check for backwardPolicy compatibility with all previous schemas till specific version.
 */
@ApiModel(description = "BackwardPolicy compatibility which tells the service to check for backwardPolicy compatibility with all previous schemas till specific version.")

public class BackwardTill   {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("versionInfo")
  private VersionInfo versionInfo = null;

  public BackwardTill name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   **/
  @JsonProperty("name")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public BackwardTill versionInfo(VersionInfo versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

  /**
   * Whether given schema is valid with respect to existing group schemas against the configured compatibility.
   * @return versionInfo
   **/
  @JsonProperty("versionInfo")
  @ApiModelProperty(required = true, value = "Whether given schema is valid with respect to existing group schemas against the configured compatibility.")
  @NotNull
  public VersionInfo getVersionInfo() {
    return versionInfo;
  }

  public void setVersionInfo(VersionInfo versionInfo) {
    this.versionInfo = versionInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackwardTill backwardTill = (BackwardTill) o;
    return Objects.equals(this.name, backwardTill.name) &&
        Objects.equals(this.versionInfo, backwardTill.versionInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, versionInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackwardTill {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    versionInfo: ").append(toIndentedString(versionInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

