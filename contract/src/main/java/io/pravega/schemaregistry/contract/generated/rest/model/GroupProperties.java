/*
 * Pravega Schema Registry APIs
 * REST APIs for Pravega Schema Registry.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.pravega.schemaregistry.contract.generated.rest.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.pravega.schemaregistry.contract.generated.rest.model.Compatibility;
import io.pravega.schemaregistry.contract.generated.rest.model.SerializationFormat;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;

/**
 * Metadata for a group.
 */
@ApiModel(description = "Metadata for a group.")

public class GroupProperties   {
  @JsonProperty("serializationFormat")
  private SerializationFormat serializationFormat = null;

  @JsonProperty("compatibility")
  private Compatibility compatibility = null;

  @JsonProperty("allowMultipleTypes")
  private Boolean allowMultipleTypes = null;

  @JsonProperty("properties")
  private Map<String, String> properties = null;

  public GroupProperties serializationFormat(SerializationFormat serializationFormat) {
    this.serializationFormat = serializationFormat;
    return this;
  }

  /**
   * serialization format for the group.
   * @return serializationFormat
   **/
  @JsonProperty("serializationFormat")
  @ApiModelProperty(required = true, value = "serialization format for the group.")
  @NotNull
  public SerializationFormat getSerializationFormat() {
    return serializationFormat;
  }

  public void setSerializationFormat(SerializationFormat serializationFormat) {
    this.serializationFormat = serializationFormat;
  }

  public GroupProperties compatibility(Compatibility compatibility) {
    this.compatibility = compatibility;
    return this;
  }

  /**
   * Compatibility to apply while registering new schema.
   * @return compatibility
   **/
  @JsonProperty("compatibility")
  @ApiModelProperty(required = true, value = "Compatibility to apply while registering new schema.")
  @NotNull
  public Compatibility getCompatibility() {
    return compatibility;
  }

  public void setCompatibility(Compatibility compatibility) {
    this.compatibility = compatibility;
  }

  public GroupProperties allowMultipleTypes(Boolean allowMultipleTypes) {
    this.allowMultipleTypes = allowMultipleTypes;
    return this;
  }

  /**
   * Flag to indicate whether to allow multiple schemas representing distinct objects to be registered in the group.
   * @return allowMultipleTypes
   **/
  @JsonProperty("allowMultipleTypes")
  @ApiModelProperty(required = true, value = "Flag to indicate whether to allow multiple schemas representing distinct objects to be registered in the group.")
  @NotNull
  public Boolean isAllowMultipleTypes() {
    return allowMultipleTypes;
  }

  public void setAllowMultipleTypes(Boolean allowMultipleTypes) {
    this.allowMultipleTypes = allowMultipleTypes;
  }

  public GroupProperties properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public GroupProperties putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * User defined Key value strings.
   * @return properties
   **/
  @JsonProperty("properties")
  @ApiModelProperty(value = "User defined Key value strings.")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupProperties groupProperties = (GroupProperties) o;
    return Objects.equals(this.serializationFormat, groupProperties.serializationFormat) &&
        Objects.equals(this.compatibility, groupProperties.compatibility) &&
        Objects.equals(this.allowMultipleTypes, groupProperties.allowMultipleTypes) &&
        Objects.equals(this.properties, groupProperties.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serializationFormat, compatibility, allowMultipleTypes, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupProperties {\n");
    
    sb.append("    serializationFormat: ").append(toIndentedString(serializationFormat)).append("\n");
    sb.append("    compatibility: ").append(toIndentedString(compatibility)).append("\n");
    sb.append("    allowMultipleTypes: ").append(toIndentedString(allowMultipleTypes)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

