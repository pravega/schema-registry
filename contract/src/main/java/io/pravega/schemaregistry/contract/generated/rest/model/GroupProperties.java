/*
 * Pravega Schema Registry APIs
 * REST APIs for Pravega Schema Registry.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.pravega.schemaregistry.contract.generated.rest.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.pravega.schemaregistry.contract.generated.rest.model.SchemaType;
import io.pravega.schemaregistry.contract.generated.rest.model.SchemaValidationRules;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;

/**
 * Metadata for a group.
 */
@ApiModel(description = "Metadata for a group.")

public class GroupProperties   {
  @JsonProperty("schemaType")
  private SchemaType schemaType = null;

  @JsonProperty("schemaValidationRules")
  private SchemaValidationRules schemaValidationRules = null;

  @JsonProperty("versionedBySchemaName")
  private Boolean versionedBySchemaName = null;

  @JsonProperty("properties")
  private Map<String, String> properties = null;

  public GroupProperties schemaType(SchemaType schemaType) {
    this.schemaType = schemaType;
    return this;
  }

  /**
   * Schema type for the group.
   * @return schemaType
   **/
  @JsonProperty("schemaType")
  @ApiModelProperty(required = true, value = "Schema type for the group.")
  @NotNull
  public SchemaType getSchemaType() {
    return schemaType;
  }

  public void setSchemaType(SchemaType schemaType) {
    this.schemaType = schemaType;
  }

  public GroupProperties schemaValidationRules(SchemaValidationRules schemaValidationRules) {
    this.schemaValidationRules = schemaValidationRules;
    return this;
  }

  /**
   * Validation rules to apply while registering new schema.
   * @return schemaValidationRules
   **/
  @JsonProperty("schemaValidationRules")
  @ApiModelProperty(required = true, value = "Validation rules to apply while registering new schema.")
  @NotNull
  public SchemaValidationRules getSchemaValidationRules() {
    return schemaValidationRules;
  }

  public void setSchemaValidationRules(SchemaValidationRules schemaValidationRules) {
    this.schemaValidationRules = schemaValidationRules;
  }

  public GroupProperties versionedBySchemaName(Boolean versionedBySchemaName) {
    this.versionedBySchemaName = versionedBySchemaName;
    return this;
  }

  /**
   * Flag to indicate whether to version schemas within the group by schema name. If set to true, addSchema will only validate against schemas that have the same schema name.
   * @return versionedBySchemaName
   **/
  @JsonProperty("versionedBySchemaName")
  @ApiModelProperty(required = true, value = "Flag to indicate whether to version schemas within the group by schema name. If set to true, addSchema will only validate against schemas that have the same schema name.")
  @NotNull
  public Boolean isVersionedBySchemaName() {
    return versionedBySchemaName;
  }

  public void setVersionedBySchemaName(Boolean versionedBySchemaName) {
    this.versionedBySchemaName = versionedBySchemaName;
  }

  public GroupProperties properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public GroupProperties putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * User defined Key value strings.
   * @return properties
   **/
  @JsonProperty("properties")
  @ApiModelProperty(value = "User defined Key value strings.")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupProperties groupProperties = (GroupProperties) o;
    return Objects.equals(this.schemaType, groupProperties.schemaType) &&
        Objects.equals(this.schemaValidationRules, groupProperties.schemaValidationRules) &&
        Objects.equals(this.versionedBySchemaName, groupProperties.versionedBySchemaName) &&
        Objects.equals(this.properties, groupProperties.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaType, schemaValidationRules, versionedBySchemaName, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupProperties {\n");
    
    sb.append("    schemaType: ").append(toIndentedString(schemaType)).append("\n");
    sb.append("    schemaValidationRules: ").append(toIndentedString(schemaValidationRules)).append("\n");
    sb.append("    versionedBySchemaName: ").append(toIndentedString(versionedBySchemaName)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

