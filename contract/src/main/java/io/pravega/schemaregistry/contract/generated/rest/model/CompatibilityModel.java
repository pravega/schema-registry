/*
 * Pravega Schema Registry APIs
 * REST APIs for Pravega Schema Registry.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.pravega.schemaregistry.contract.generated.rest.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.pravega.schemaregistry.contract.generated.rest.model.VersionInfoModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/**
 * CompatibilityModel
 */

public class CompatibilityModel   {
  /**
   * Gets or Sets policy
   */
  public enum PolicyEnum {
    ALLOWANY("AllowAny"),
    
    DISALLOWALL("DisallowAll"),
    
    BACKWARD("Backward"),
    
    FORWARD("Forward"),
    
    FORWARD_TRANSITIVE("Forward_Transitive"),
    
    BACKWARD_TRANSITIVE("Backward_Transitive"),
    
    BACKWARDTILL("BackwardTill"),
    
    FORWARDTILL("ForwardTill"),
    
    BACKWARDANDFORWARDTILL("BackwardAndForwardTill"),
    
    FULL("Full"),
    
    FULL_TRANSITIVE("Full_Transitive");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PolicyEnum fromValue(String text) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("policy")
  private PolicyEnum policy = null;

  @JsonProperty("backwardTill")
  private VersionInfoModel backwardTill = null;

  @JsonProperty("forwardTill")
  private VersionInfoModel forwardTill = null;

  public CompatibilityModel policy(PolicyEnum policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   **/
  @JsonProperty("policy")
  @ApiModelProperty(value = "")
  public PolicyEnum getPolicy() {
    return policy;
  }

  public void setPolicy(PolicyEnum policy) {
    this.policy = policy;
  }

  public CompatibilityModel backwardTill(VersionInfoModel backwardTill) {
    this.backwardTill = backwardTill;
    return this;
  }

  /**
   * Get backwardTill
   * @return backwardTill
   **/
  @JsonProperty("backwardTill")
  @ApiModelProperty(value = "")
  public VersionInfoModel getBackwardTill() {
    return backwardTill;
  }

  public void setBackwardTill(VersionInfoModel backwardTill) {
    this.backwardTill = backwardTill;
  }

  public CompatibilityModel forwardTill(VersionInfoModel forwardTill) {
    this.forwardTill = forwardTill;
    return this;
  }

  /**
   * Get forwardTill
   * @return forwardTill
   **/
  @JsonProperty("forwardTill")
  @ApiModelProperty(value = "")
  public VersionInfoModel getForwardTill() {
    return forwardTill;
  }

  public void setForwardTill(VersionInfoModel forwardTill) {
    this.forwardTill = forwardTill;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompatibilityModel compatibilityModel = (CompatibilityModel) o;
    return Objects.equals(this.policy, compatibilityModel.policy) &&
        Objects.equals(this.backwardTill, compatibilityModel.backwardTill) &&
        Objects.equals(this.forwardTill, compatibilityModel.forwardTill);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policy, backwardTill, forwardTill);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompatibilityModel {\n");
    
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    backwardTill: ").append(toIndentedString(backwardTill)).append("\n");
    sb.append("    forwardTill: ").append(toIndentedString(forwardTill)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

