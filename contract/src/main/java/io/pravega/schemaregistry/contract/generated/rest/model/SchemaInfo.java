/*
 * Pravega Schema Registry APIs
 * REST APIs for Pravega Schema Registry.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.pravega.schemaregistry.contract.generated.rest.model;

import java.util.Arrays;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.pravega.schemaregistry.contract.generated.rest.model.SerializationFormat;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;

/**
 * Schema information object that encapsulates various properties of a schema.
 */
@ApiModel(description = "Schema information object that encapsulates various properties of a schema.")

public class SchemaInfo   {
  @JsonProperty("type")
  private String type = null;

  @JsonProperty("serializationFormat")
  private SerializationFormat serializationFormat = null;

  @JsonProperty("schemaData")
  private byte[] schemaData = null;

  @JsonProperty("properties")
  private Map<String, String> properties = null;

  public SchemaInfo type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Name of the schema. This identifies the type of object the schema payload represents.
   * @return type
   **/
  @JsonProperty("type")
  @ApiModelProperty(required = true, value = "Name of the schema. This identifies the type of object the schema payload represents.")
  @NotNull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public SchemaInfo serializationFormat(SerializationFormat serializationFormat) {
    this.serializationFormat = serializationFormat;
    return this;
  }

  /**
   * Type of schema.
   * @return serializationFormat
   **/
  @JsonProperty("serializationFormat")
  @ApiModelProperty(required = true, value = "Type of schema.")
  @NotNull
  public SerializationFormat getSerializationFormat() {
    return serializationFormat;
  }

  public void setSerializationFormat(SerializationFormat serializationFormat) {
    this.serializationFormat = serializationFormat;
  }

  public SchemaInfo schemaData(byte[] schemaData) {
    this.schemaData = schemaData;
    return this;
  }

  /**
   * Base64 encoded string for binary data for schema.
   * @return schemaData
   **/
  @JsonProperty("schemaData")
  @ApiModelProperty(required = true, value = "Base64 encoded string for binary data for schema.")
  @NotNull
  public byte[] getSchemaData() {
    return schemaData;
  }

  public void setSchemaData(byte[] schemaData) {
    this.schemaData = schemaData;
  }

  public SchemaInfo properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public SchemaInfo putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * User defined key value strings.
   * @return properties
   **/
  @JsonProperty("properties")
  @ApiModelProperty(value = "User defined key value strings.")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaInfo schemaInfo = (SchemaInfo) o;
    return Objects.equals(this.type, schemaInfo.type) &&
        Objects.equals(this.serializationFormat, schemaInfo.serializationFormat) &&
            Arrays.equals(this.schemaData, schemaInfo.schemaData) &&
        Objects.equals(this.properties, schemaInfo.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, serializationFormat, schemaData, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaInfo {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    serializationFormat: ").append(toIndentedString(serializationFormat)).append("\n");
    sb.append("    schemaData: ").append(toIndentedString(schemaData)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

