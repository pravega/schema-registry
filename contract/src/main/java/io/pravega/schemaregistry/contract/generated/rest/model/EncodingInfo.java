/*
 * Pravega Schema Registry APIs
 * REST APIs for Pravega Schema Registry.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.pravega.schemaregistry.contract.generated.rest.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.pravega.schemaregistry.contract.generated.rest.model.CodecType;
import io.pravega.schemaregistry.contract.generated.rest.model.SchemaInfo;
import io.pravega.schemaregistry.contract.generated.rest.model.VersionInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/**
 * Encoding information object that resolves the schema version and codec used for corresponding encoding id.
 */
@ApiModel(description = "Encoding information object that resolves the schema version and codec used for corresponding encoding id.")

public class EncodingInfo   {
  @JsonProperty("schemaInfo")
  private SchemaInfo schemaInfo = null;

  @JsonProperty("versionInfo")
  private VersionInfo versionInfo = null;

  @JsonProperty("codecType")
  private CodecType codecType = null;

  public EncodingInfo schemaInfo(SchemaInfo schemaInfo) {
    this.schemaInfo = schemaInfo;
    return this;
  }

  /**
   * Schema information object.
   * @return schemaInfo
   **/
  @JsonProperty("schemaInfo")
  @ApiModelProperty(required = true, value = "Schema information object.")
  @NotNull
  public SchemaInfo getSchemaInfo() {
    return schemaInfo;
  }

  public void setSchemaInfo(SchemaInfo schemaInfo) {
    this.schemaInfo = schemaInfo;
  }

  public EncodingInfo versionInfo(VersionInfo versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

  /**
   * Version information object.
   * @return versionInfo
   **/
  @JsonProperty("versionInfo")
  @ApiModelProperty(required = true, value = "Version information object.")
  @NotNull
  public VersionInfo getVersionInfo() {
    return versionInfo;
  }

  public void setVersionInfo(VersionInfo versionInfo) {
    this.versionInfo = versionInfo;
  }

  public EncodingInfo codecType(CodecType codecType) {
    this.codecType = codecType;
    return this;
  }

  /**
   * Codec type object.
   * @return codecType
   **/
  @JsonProperty("codecType")
  @ApiModelProperty(required = true, value = "Codec type object.")
  @NotNull
  public CodecType getCodecType() {
    return codecType;
  }

  public void setCodecType(CodecType codecType) {
    this.codecType = codecType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncodingInfo encodingInfo = (EncodingInfo) o;
    return Objects.equals(this.schemaInfo, encodingInfo.schemaInfo) &&
        Objects.equals(this.versionInfo, encodingInfo.versionInfo) &&
        Objects.equals(this.codecType, encodingInfo.codecType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaInfo, versionInfo, codecType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncodingInfo {\n");
    
    sb.append("    schemaInfo: ").append(toIndentedString(schemaInfo)).append("\n");
    sb.append("    versionInfo: ").append(toIndentedString(versionInfo)).append("\n");
    sb.append("    codecType: ").append(toIndentedString(codecType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

