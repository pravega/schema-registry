/*
 * Pravega Schema Registry APIs
 * REST APIs for Pravega Schema Registry.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.pravega.schemaregistry.contract.generated.rest.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;

/**
 * Type of codec. For custom codec use codecType.Custom with customTypeName and optionally additional properties.
 */
@ApiModel(description = "Type of codec. For custom codec use codecType.Custom with customTypeName and optionally additional properties.")

public class CodecType   {
  /**
   * Code Type enum.
   */
  public enum CodecTypeEnum {
    NONE("None"),
    
    SNAPPY("Snappy"),
    
    GZIP("Gzip"),
    
    CUSTOM("Custom");

    private String value;

    CodecTypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CodecTypeEnum fromValue(String text) {
      for (CodecTypeEnum b : CodecTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("codecType")
  private CodecTypeEnum codecType = null;

  @JsonProperty("customTypeName")
  private String customTypeName = null;

  @JsonProperty("properties")
  private Map<String, String> properties = null;

  public CodecType codecType(CodecTypeEnum codecType) {
    this.codecType = codecType;
    return this;
  }

  /**
   * Code Type enum.
   * @return codecType
   **/
  @JsonProperty("codecType")
  @ApiModelProperty(required = true, value = "Code Type enum.")
  @NotNull
  public CodecTypeEnum getCodecType() {
    return codecType;
  }

  public void setCodecType(CodecTypeEnum codecType) {
    this.codecType = codecType;
  }

  public CodecType customTypeName(String customTypeName) {
    this.customTypeName = customTypeName;
    return this;
  }

  /**
   * Custom type name when codecType.custom is chosen.
   * @return customTypeName
   **/
  @JsonProperty("customTypeName")
  @ApiModelProperty(value = "Custom type name when codecType.custom is chosen.")
  public String getCustomTypeName() {
    return customTypeName;
  }

  public void setCustomTypeName(String customTypeName) {
    this.customTypeName = customTypeName;
  }

  public CodecType properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public CodecType putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Optional additional key value string for codecType.cusom.
   * @return properties
   **/
  @JsonProperty("properties")
  @ApiModelProperty(value = "Optional additional key value string for codecType.cusom.")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodecType codecType = (CodecType) o;
    return Objects.equals(this.codecType, codecType.codecType) &&
        Objects.equals(this.customTypeName, codecType.customTypeName) &&
        Objects.equals(this.properties, codecType.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codecType, customTypeName, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodecType {\n");
    
    sb.append("    codecType: ").append(toIndentedString(codecType)).append("\n");
    sb.append("    customTypeName: ").append(toIndentedString(customTypeName)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

