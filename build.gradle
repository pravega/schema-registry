import com.github.spotbugs.SpotBugsTask
import org.gradle.internal.jvm.Jvm

/**
 * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 */

apply plugin: 'org.ajoberstar.grgit'

// Apply the java plugin to add support for Java
buildscript {

    // log the current JVM version.
    println "Build JVM Version is : " + Jvm.current()
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            url "https://repository.apache.org/snapshots"
        }
        maven {
            url "https://oss.jfrog.org/jfrog-dependencies"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'com.google.protobuf', name:'protobuf-gradle-plugin', version: protobufGradlePlugin
        classpath "gradle.plugin.org.nosphere.apache:creadur-rat-gradle:0.3.0"
        classpath group: 'org.hidetake', name: 'gradle-ssh-plugin', version: gradleSshPluginVersion
        classpath group: 'gradle.plugin.com.github.spotbugs', name: 'spotbugs-gradle-plugin', version: spotbugsPluginVersion
        classpath "org.ajoberstar:grgit:${gradleGitPluginVersion}"
        classpath "io.franzbecker:gradle-lombok:${gradleLombokPluginVersion}"
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    if (file("src/main/java").isDirectory()) {
        apply plugin: 'java'
        apply plugin: 'io.franzbecker.gradle-lombok'
        lombok {
            version = lombokVersion
        }
        dependencies {
            //These are compile time only dependencies needed accross all targets. Lombok uses them and may generate strange errors if they are missing.
            compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
            testCompile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
            compileOnly 'org.projectlombok:lombok:' + lombokVersion
            
            testCompileOnly 'org.projectlombok:lombok:' + lombokVersion
            annotationProcessor 'org.projectlombok:lombok:' + lombokVersion
            testAnnotationProcessor 'org.projectlombok:lombok:' + lombokVersion
        }
        // Delombok sources.
        task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask, dependsOn: compileJava) {
            ext.outputDir = file("$buildDir/delombok")
            outputs.dir(outputDir)
            sourceSets.main.java.srcDirs.each {
                inputs.dir(it)
                args(it, "-d", outputDir)
            }
        }
    }
    // Plugin configurations
    apply from: "$rootDir/gradle/application.gradle"
    apply from: "$rootDir/gradle/checkstyle.gradle"
    apply from: "$rootDir/gradle/eclipse.gradle"
    apply from: "$rootDir/gradle/spotbugs.gradle"
    apply from: "$rootDir/gradle/idea.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/java.gradle"
    apply from: "$rootDir/gradle/maven.gradle"
    apply from: "$rootDir/gradle/protobuf.gradle"
    apply from: "$rootDir/gradle/rat.gradle"

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
    tasks.withType(SpotBugsTask) {
        classpath += sourceSets."${(it.name - ~/^spotbugs/).uncapitalize()}".compileClasspath
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
    version = getProjectVersion()
    group = "io.pravega.schemaregistry"

    configurations.all {
        resolutionStrategy {
            force "com.google.guava:guava:" + guavaVersion
            force "com.google.protobuf:protobuf-java:" + protobufProtocVersion
            force "commons-beanutils:commons-beanutils:" + commonsBeanutilsVersion
            force "org.apache.commons:commons-compress:" + apacheCommonsCompressVersion
            force "org.apache.commons:commons-lang3:" + commonsLang3Version
            force "org.glassfish.jersey.core:jersey-common:" + jerseyVersion
            force "org.glassfish.jersey.core:jersey-server:" + jerseyVersion
            force "com.fasterxml.jackson.core:jackson-databind:" + jacksonVersion
            force "org.slf4j:slf4j-api:" + slf4jApiVersion
        }
    }
}

project('common') {
    dependencies {
        compile group: 'commons-io', name: 'commons-io', version: commonsioVersion
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'io.pravega', name: 'pravega-common', version: pravegaVersion
        //Do NOT add any additional dependencies here.
    }

    javadoc {
        title = "Common Libraries"
        dependsOn delombok
        source = delombok.outputDir
        failOnError = false
        options.addBooleanOption("Xdoclint:none", true)
    }
}

project('contract') {
    dependencies {
        compile project(':common')
        testCompile group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4jApiVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        compile group: 'javax.servlet', name: 'javax.servlet-api', version: javaxServletApiVersion
        compile(group: 'io.swagger', name : 'swagger-jersey2-jaxrs', version :swaggerJersey2JaxrsVersion) {
            exclude group: 'com.google.guava', module: 'guava'
        }
        compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: jerseyVersion
        compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyVersion
        compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion
        compile group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion
        compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: jaxbVersion

    }

    javadoc {
        title = "Registry Contract"
        dependsOn delombok
        source = delombok.outputDir
        failOnError = false
        exclude "**/impl/**";
        options.addBooleanOption("Xdoclint:all,-reference", true)
    }
}

project('client') {
    dependencies {
        compile project(':common')
        compile project(':contract')
        testCompile group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4jApiVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
    }

    javadoc {
        title = "Registry Client"
        dependsOn delombok
        source = delombok.outputDir
        failOnError = false
        exclude "**/impl/**";
        options.addBooleanOption("Xdoclint:all,-reference", true)
    }
}

project('server') {
    sourceSets {
        main.resources.srcDirs += "$projectDir/src/conf"
        test.resources.srcDirs += "$rootDir/resources"
    }

    apply plugin: 'application'
    applicationName = "schema-registry"
    mainClassName = "io.pravega.schemaregistry.service.Main"
    applicationDefaultJvmArgs = ["-server", "-Xms128m", "-XX:+HeapDumpOnOutOfMemoryError",
                                 "-Dconfig.file=PRAVEGA_APP_HOME/conf/schemaregistry.config.properties",
                                 "-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml",
                                 "-Dlog.dir=PRAVEGA_APP_HOME/logs",
                                 "-Dlog.name=schemaregistry"]
    startScripts {
        classpath += files('$APP_HOME/pluginlib')
        doLast {
            def scriptFile = file getUnixScript()
            scriptFile.text = scriptFile.text.replace('$APP_HOME/lib/pluginlib', '$APP_HOME/pluginlib/*')
            def winScriptFile = file getWindowsScript()
            winScriptFile.text = winScriptFile.text.replace('%APP_HOME%\\lib\\pluginlib', '%APP_HOME%\\pluginlib\\*')
        }
    }
    applicationDistribution.from('src/conf') {
        into "conf"
        rename "application.conf", "schemaregistry.conf"
    }

    applicationDistribution.into('') {
        def pluginDirBase = new File('/tmp/dummy-dir')
        pluginDirBase.mkdirs()
        def logDir = new File(pluginDirBase.absolutePath + '/pluginlib')
        logDir.mkdirs()

        from {pluginDirBase}
    }

    dependencies {
        compile project(':common')
        compile project(':contract')
        compile group: 'io.pravega', name: 'pravega-client', version: pravegaVersion
        compile group: 'io.pravega', name: 'pravega-controller', version: pravegaVersion
        compile group: 'org.apache.avro', name: 'avro', version: avroVersion
        compile group: 'org.apache.avro', name: 'avro-protobuf', version: avroProtobufVersion
        compile group: 'com.google.protobuf', name: 'protobuf-java', version: protobufProtocVersion
        testCompile group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4jApiVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        testCompile group: 'org.glassfish.jersey.test-framework.providers', name: 'jersey-test-framework-provider-grizzly2', version: jerseyVersion
    }

    javadoc {
        title = "Registry Server"
        dependsOn delombok
        source = delombok.outputDir
        failOnError = false
        exclude "**/impl/**";
        options.addBooleanOption("Xdoclint:all,-reference", true)
    }
}

project('serializers') {
    dependencies {
        compile project(':common')
        compile project(':client')
        compile group: 'org.apache.avro', name: 'avro', version: avroVersion
        compile group: 'org.apache.avro', name: 'avro-protobuf', version: avroProtobufVersion
        compile group: 'com.google.protobuf', name: 'protobuf-java', version: protobufProtocVersion
        compile group: 'com.google.protobuf', name:'protobuf-gradle-plugin', version: protobufGradlePlugin
        compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: protobufUtilVersion
        compile group: 'io.pravega', name: 'pravega-client', version: pravegaVersion
        compile group: 'org.xerial.snappy', name: 'snappy-java', version: snappyVersion
        compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-jsonSchema', version: jacksonVersion
        testCompile group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4jApiVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
    }

    javadoc {
        title = "Serializers"
        dependsOn delombok
        source = delombok.outputDir
        failOnError = false
        exclude "**/impl/**";
        options.addBooleanOption("Xdoclint:all,-reference", true)
    }
}

project('samples') {
    sourceSets {
        test.resources.srcDirs += "$rootDir/resources"
    }

    dependencies {
        compile project(':common')
        compile project(':contract')
        compile project(':client')
        compile project(':server')
        compile project(':serializers')
        compile group: 'io.pravega', name: 'pravega-standalone', version: pravegaVersion

        testCompile group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4jApiVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
    }

    javadoc {
        title = "Samples"
        dependsOn delombok
        source = delombok.outputDir
        failOnError = false
        exclude "**/impl/**";
        options.addBooleanOption("Xdoclint:all,-reference", true)
    }
}

task publishAllJars() {
    dependsOn ':client:publish'
    dependsOn ':common:publish'
    dependsOn ':contract:publish'
    dependsOn ':server:publish'
    dependsOn ':serializers:publish'
}

def getProjectVersion() {
    String ver = schemaregistryVersion
    if (grgit && ver.contains("-SNAPSHOT")) {
        String versionLabel = ver.substring(0, ver.indexOf("-SNAPSHOT"))
        def count = grgit.log(includes:['HEAD']).size()
        def commitId = "${grgit.head().abbreviatedId}"
        ver = versionLabel + "-" + count + "." + commitId + "-SNAPSHOT"
    }
    return ver
}
