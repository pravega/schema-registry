/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.pravega.schemaregistry.serializer.avro.testobjs.generated.avro;

import io.pravega.schemaregistry.serializer.avro.testobjs.EventTimestampAware;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, EventTimestampAware {
  private static final long serialVersionUID = 7820250504031892698L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"io.pravega.schemaregistry.serializer.avro.testobjs.generated.avro\",\"fields\":[{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"biography\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"eventTimestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"keyValues\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"KeyValue\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}]}}]},{\"name\":\"keyValues2\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"KeyValue2\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}]}}]},{\"name\":\"keyValues3\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"KeyValue3\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}]}}]},{\"name\":\"address\",\"type\":{\"type\":\"record\",\"name\":\"AddressEntry\",\"fields\":[{\"name\":\"streetAddress\",\"type\":\"string\"},{\"name\":\"postalCode\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"city\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<User> ENCODER =
      new BinaryMessageEncoder<User>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<User> DECODER =
      new BinaryMessageDecoder<User>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<User> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<User> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<User>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this User to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a User from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a User instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static User fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated
  public CharSequence userId;
  @Deprecated
  public CharSequence name;
  @Deprecated
  public CharSequence biography;
  @Deprecated
  public Long eventTimestamp;
  @Deprecated
  public java.util.List<KeyValue> keyValues;
  @Deprecated
  public java.util.List<KeyValue2> keyValues2;
  @Deprecated
  public java.util.List<KeyValue3> keyValues3;
  @Deprecated
  public AddressEntry address;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param userId The new value for userId
   * @param name The new value for name
   * @param biography The new value for biography
   * @param eventTimestamp The new value for eventTimestamp
   * @param keyValues The new value for keyValues
   * @param keyValues2 The new value for keyValues2
   * @param keyValues3 The new value for keyValues3
   * @param address The new value for address
   */
  public User(CharSequence userId, CharSequence name, CharSequence biography, Long eventTimestamp, java.util.List<KeyValue> keyValues, java.util.List<KeyValue2> keyValues2, java.util.List<KeyValue3> keyValues3, AddressEntry address) {
    this.userId = userId;
    this.name = name;
    this.biography = biography;
    this.eventTimestamp = eventTimestamp;
    this.keyValues = keyValues;
    this.keyValues2 = keyValues2;
    this.keyValues3 = keyValues3;
    this.address = address;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return name;
    case 2: return biography;
    case 3: return eventTimestamp;
    case 4: return keyValues;
    case 5: return keyValues2;
    case 6: return keyValues3;
    case 7: return address;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: userId = (CharSequence)value$; break;
    case 1: name = (CharSequence)value$; break;
    case 2: biography = (CharSequence)value$; break;
    case 3: eventTimestamp = (Long)value$; break;
    case 4: keyValues = (java.util.List<KeyValue>)value$; break;
    case 5: keyValues2 = (java.util.List<KeyValue2>)value$; break;
    case 6: keyValues3 = (java.util.List<KeyValue3>)value$; break;
    case 7: address = (AddressEntry)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public CharSequence getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(CharSequence value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'biography' field.
   * @return The value of the 'biography' field.
   */
  public CharSequence getBiography() {
    return biography;
  }


  /**
   * Sets the value of the 'biography' field.
   * @param value the value to set.
   */
  public void setBiography(CharSequence value) {
    this.biography = value;
  }

  /**
   * Gets the value of the 'eventTimestamp' field.
   * @return The value of the 'eventTimestamp' field.
   */
  public Long getEventTimestamp() {
    return eventTimestamp;
  }


  /**
   * Sets the value of the 'eventTimestamp' field.
   * @param value the value to set.
   */
  public void setEventTimestamp(Long value) {
    this.eventTimestamp = value;
  }

  /**
   * Gets the value of the 'keyValues' field.
   * @return The value of the 'keyValues' field.
   */
  public java.util.List<KeyValue> getKeyValues() {
    return keyValues;
  }


  /**
   * Sets the value of the 'keyValues' field.
   * @param value the value to set.
   */
  public void setKeyValues(java.util.List<KeyValue> value) {
    this.keyValues = value;
  }

  /**
   * Gets the value of the 'keyValues2' field.
   * @return The value of the 'keyValues2' field.
   */
  public java.util.List<KeyValue2> getKeyValues2() {
    return keyValues2;
  }


  /**
   * Sets the value of the 'keyValues2' field.
   * @param value the value to set.
   */
  public void setKeyValues2(java.util.List<KeyValue2> value) {
    this.keyValues2 = value;
  }

  /**
   * Gets the value of the 'keyValues3' field.
   * @return The value of the 'keyValues3' field.
   */
  public java.util.List<KeyValue3> getKeyValues3() {
    return keyValues3;
  }


  /**
   * Sets the value of the 'keyValues3' field.
   * @param value the value to set.
   */
  public void setKeyValues3(java.util.List<KeyValue3> value) {
    this.keyValues3 = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public AddressEntry getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(AddressEntry value) {
    this.address = value;
  }

  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static User.Builder newBuilder() {
    return new User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static User.Builder newBuilder(User.Builder other) {
    if (other == null) {
      return new User.Builder();
    } else {
      return new User.Builder(other);
    }
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static User.Builder newBuilder(User other) {
    if (other == null) {
      return new User.Builder();
    } else {
      return new User.Builder(other);
    }
  }

  /**
   * RecordBuilder for User instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private CharSequence userId;
    private CharSequence name;
    private CharSequence biography;
    private Long eventTimestamp;
    private java.util.List<KeyValue> keyValues;
    private java.util.List<KeyValue2> keyValues2;
    private java.util.List<KeyValue3> keyValues3;
    private AddressEntry address;
    private AddressEntry.Builder addressBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.biography)) {
        this.biography = data().deepCopy(fields()[2].schema(), other.biography);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[3].schema(), other.eventTimestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.keyValues)) {
        this.keyValues = data().deepCopy(fields()[4].schema(), other.keyValues);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.keyValues2)) {
        this.keyValues2 = data().deepCopy(fields()[5].schema(), other.keyValues2);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.keyValues3)) {
        this.keyValues3 = data().deepCopy(fields()[6].schema(), other.keyValues3);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.address)) {
        this.address = data().deepCopy(fields()[7].schema(), other.address);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasAddressBuilder()) {
        this.addressBuilder = AddressEntry.newBuilder(other.getAddressBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(User other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.biography)) {
        this.biography = data().deepCopy(fields()[2].schema(), other.biography);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[3].schema(), other.eventTimestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.keyValues)) {
        this.keyValues = data().deepCopy(fields()[4].schema(), other.keyValues);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.keyValues2)) {
        this.keyValues2 = data().deepCopy(fields()[5].schema(), other.keyValues2);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.keyValues3)) {
        this.keyValues3 = data().deepCopy(fields()[6].schema(), other.keyValues3);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.address)) {
        this.address = data().deepCopy(fields()[7].schema(), other.address);
        fieldSetFlags()[7] = true;
      }
      this.addressBuilder = null;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public CharSequence getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public User.Builder setUserId(CharSequence value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public User.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public User.Builder setName(CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public User.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'biography' field.
      * @return The value.
      */
    public CharSequence getBiography() {
      return biography;
    }


    /**
      * Sets the value of the 'biography' field.
      * @param value The value of 'biography'.
      * @return This builder.
      */
    public User.Builder setBiography(CharSequence value) {
      validate(fields()[2], value);
      this.biography = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'biography' field has been set.
      * @return True if the 'biography' field has been set, false otherwise.
      */
    public boolean hasBiography() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'biography' field.
      * @return This builder.
      */
    public User.Builder clearBiography() {
      biography = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTimestamp' field.
      * @return The value.
      */
    public Long getEventTimestamp() {
      return eventTimestamp;
    }


    /**
      * Sets the value of the 'eventTimestamp' field.
      * @param value The value of 'eventTimestamp'.
      * @return This builder.
      */
    public User.Builder setEventTimestamp(Long value) {
      validate(fields()[3], value);
      this.eventTimestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTimestamp' field has been set.
      * @return True if the 'eventTimestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eventTimestamp' field.
      * @return This builder.
      */
    public User.Builder clearEventTimestamp() {
      eventTimestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyValues' field.
      * @return The value.
      */
    public java.util.List<KeyValue> getKeyValues() {
      return keyValues;
    }


    /**
      * Sets the value of the 'keyValues' field.
      * @param value The value of 'keyValues'.
      * @return This builder.
      */
    public User.Builder setKeyValues(java.util.List<KeyValue> value) {
      validate(fields()[4], value);
      this.keyValues = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'keyValues' field has been set.
      * @return True if the 'keyValues' field has been set, false otherwise.
      */
    public boolean hasKeyValues() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'keyValues' field.
      * @return This builder.
      */
    public User.Builder clearKeyValues() {
      keyValues = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyValues2' field.
      * @return The value.
      */
    public java.util.List<KeyValue2> getKeyValues2() {
      return keyValues2;
    }


    /**
      * Sets the value of the 'keyValues2' field.
      * @param value The value of 'keyValues2'.
      * @return This builder.
      */
    public User.Builder setKeyValues2(java.util.List<KeyValue2> value) {
      validate(fields()[5], value);
      this.keyValues2 = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'keyValues2' field has been set.
      * @return True if the 'keyValues2' field has been set, false otherwise.
      */
    public boolean hasKeyValues2() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'keyValues2' field.
      * @return This builder.
      */
    public User.Builder clearKeyValues2() {
      keyValues2 = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyValues3' field.
      * @return The value.
      */
    public java.util.List<KeyValue3> getKeyValues3() {
      return keyValues3;
    }


    /**
      * Sets the value of the 'keyValues3' field.
      * @param value The value of 'keyValues3'.
      * @return This builder.
      */
    public User.Builder setKeyValues3(java.util.List<KeyValue3> value) {
      validate(fields()[6], value);
      this.keyValues3 = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'keyValues3' field has been set.
      * @return True if the 'keyValues3' field has been set, false otherwise.
      */
    public boolean hasKeyValues3() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'keyValues3' field.
      * @return This builder.
      */
    public User.Builder clearKeyValues3() {
      keyValues3 = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public AddressEntry getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public User.Builder setAddress(AddressEntry value) {
      validate(fields()[7], value);
      this.addressBuilder = null;
      this.address = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'address' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public AddressEntry.Builder getAddressBuilder() {
      if (addressBuilder == null) {
        if (hasAddress()) {
          setAddressBuilder(AddressEntry.newBuilder(address));
        } else {
          setAddressBuilder(AddressEntry.newBuilder());
        }
      }
      return addressBuilder;
    }

    /**
     * Sets the Builder instance for the 'address' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public User.Builder setAddressBuilder(AddressEntry.Builder value) {
      clearAddress();
      addressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'address' field has an active Builder instance
     * @return True if the 'address' field has an active Builder instance
     */
    public boolean hasAddressBuilder() {
      return addressBuilder != null;
    }

    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public User.Builder clearAddress() {
      address = null;
      addressBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public User build() {
      try {
        User record = new User();
        record.userId = fieldSetFlags()[0] ? this.userId : (CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (CharSequence) defaultValue(fields()[1]);
        record.biography = fieldSetFlags()[2] ? this.biography : (CharSequence) defaultValue(fields()[2]);
        record.eventTimestamp = fieldSetFlags()[3] ? this.eventTimestamp : (Long) defaultValue(fields()[3]);
        record.keyValues = fieldSetFlags()[4] ? this.keyValues : (java.util.List<KeyValue>) defaultValue(fields()[4]);
        record.keyValues2 = fieldSetFlags()[5] ? this.keyValues2 : (java.util.List<KeyValue2>) defaultValue(fields()[5]);
        record.keyValues3 = fieldSetFlags()[6] ? this.keyValues3 : (java.util.List<KeyValue3>) defaultValue(fields()[6]);
        if (addressBuilder != null) {
          try {
            record.address = this.addressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("address"));
            throw e;
          }
        } else {
          record.address = fieldSetFlags()[7] ? this.address : (AddressEntry) defaultValue(fields()[7]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<User>
    WRITER$ = (org.apache.avro.io.DatumWriter<User>)MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<User>
    READER$ = (org.apache.avro.io.DatumReader<User>)MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() { return true; }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.userId);

    out.writeString(this.name);

    if (this.biography == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.biography);
    }

    if (this.eventTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.eventTimestamp);
    }

    if (this.keyValues == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.keyValues.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (KeyValue e0: this.keyValues) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.keyValues2 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.keyValues2.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (KeyValue2 e1: this.keyValues2) {
        actualSize1++;
        out.startItem();
        e1.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.keyValues3 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.keyValues3.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (KeyValue3 e2: this.keyValues3) {
        actualSize2++;
        out.startItem();
        e2.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    this.address.customEncode(out);

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userId = in.readString(this.userId instanceof Utf8 ? (Utf8)this.userId : null);

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.biography = null;
      } else {
        this.biography = in.readString(this.biography instanceof Utf8 ? (Utf8)this.biography : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eventTimestamp = null;
      } else {
        this.eventTimestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyValues = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<KeyValue> a0 = this.keyValues;
        if (a0 == null) {
          a0 = new SpecificData.Array<KeyValue>((int)size0, SCHEMA$.getField("keyValues").schema().getTypes().get(1));
          this.keyValues = a0;
        } else a0.clear();
        SpecificData.Array<KeyValue> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<KeyValue>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            KeyValue e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new KeyValue();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyValues2 = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<KeyValue2> a1 = this.keyValues2;
        if (a1 == null) {
          a1 = new SpecificData.Array<KeyValue2>((int)size1, SCHEMA$.getField("keyValues2").schema().getTypes().get(1));
          this.keyValues2 = a1;
        } else a1.clear();
        SpecificData.Array<KeyValue2> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<KeyValue2>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            KeyValue2 e1 = (ga1 != null ? ga1.peek() : null);
            if (e1 == null) {
              e1 = new KeyValue2();
            }
            e1.customDecode(in);
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyValues3 = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<KeyValue3> a2 = this.keyValues3;
        if (a2 == null) {
          a2 = new SpecificData.Array<KeyValue3>((int)size2, SCHEMA$.getField("keyValues3").schema().getTypes().get(1));
          this.keyValues3 = a2;
        } else a2.clear();
        SpecificData.Array<KeyValue3> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<KeyValue3>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            KeyValue3 e2 = (ga2 != null ? ga2.peek() : null);
            if (e2 == null) {
              e2 = new KeyValue3();
            }
            e2.customDecode(in);
            a2.add(e2);
          }
        }
      }

      if (this.address == null) {
        this.address = new AddressEntry();
      }
      this.address.customDecode(in);

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userId = in.readString(this.userId instanceof Utf8 ? (Utf8)this.userId : null);
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.biography = null;
          } else {
            this.biography = in.readString(this.biography instanceof Utf8 ? (Utf8)this.biography : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eventTimestamp = null;
          } else {
            this.eventTimestamp = in.readLong();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyValues = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<KeyValue> a0 = this.keyValues;
            if (a0 == null) {
              a0 = new SpecificData.Array<KeyValue>((int)size0, SCHEMA$.getField("keyValues").schema().getTypes().get(1));
              this.keyValues = a0;
            } else a0.clear();
            SpecificData.Array<KeyValue> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<KeyValue>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                KeyValue e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new KeyValue();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyValues2 = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<KeyValue2> a1 = this.keyValues2;
            if (a1 == null) {
              a1 = new SpecificData.Array<KeyValue2>((int)size1, SCHEMA$.getField("keyValues2").schema().getTypes().get(1));
              this.keyValues2 = a1;
            } else a1.clear();
            SpecificData.Array<KeyValue2> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<KeyValue2>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                KeyValue2 e1 = (ga1 != null ? ga1.peek() : null);
                if (e1 == null) {
                  e1 = new KeyValue2();
                }
                e1.customDecode(in);
                a1.add(e1);
              }
            }
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyValues3 = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<KeyValue3> a2 = this.keyValues3;
            if (a2 == null) {
              a2 = new SpecificData.Array<KeyValue3>((int)size2, SCHEMA$.getField("KeyValues3").schema().getTypes().get(1));
              this.keyValues3 = a2;
            } else a2.clear();
            SpecificData.Array<KeyValue3> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<KeyValue3>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                KeyValue3 e2 = (ga2 != null ? ga2.peek() : null);
                if (e2 == null) {
                  e2 = new KeyValue3();
                }
                e2.customDecode(in);
                a2.add(e2);
              }
            }
          }
          break;

        case 7:
          if (this.address == null) {
            this.address = new AddressEntry();
          }
          this.address.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










