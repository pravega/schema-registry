/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.pravega.schemaregistry.samples.generated;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Type3 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1528271136113709498L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Type3\",\"namespace\":\"io.pravega.schemaregistry.test.integrationtest.generated\",\"fields\":[{\"name\":\"f\",\"type\":\"string\"},{\"name\":\"g\",\"type\":\"int\"},{\"name\":\"h\",\"type\":\"string\"},{\"name\":\"i\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Type3> ENCODER =
      new BinaryMessageEncoder<Type3>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Type3> DECODER =
      new BinaryMessageDecoder<Type3>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Type3> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Type3> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Type3> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Type3>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Type3 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Type3 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Type3 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Type3 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence f;
   private int g;
   private java.lang.CharSequence h;
   private java.lang.CharSequence i;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Type3() {}

  /**
   * All-args constructor.
   * @param f The new value for f
   * @param g The new value for g
   * @param h The new value for h
   * @param i The new value for i
   */
  public Type3(java.lang.CharSequence f, java.lang.Integer g, java.lang.CharSequence h, java.lang.CharSequence i) {
    this.f = f;
    this.g = g;
    this.h = h;
    this.i = i;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return f;
    case 1: return g;
    case 2: return h;
    case 3: return i;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: f = (java.lang.CharSequence)value$; break;
    case 1: g = (java.lang.Integer)value$; break;
    case 2: h = (java.lang.CharSequence)value$; break;
    case 3: i = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'f' field.
   * @return The value of the 'f' field.
   */
  public java.lang.CharSequence getF() {
    return f;
  }


  /**
   * Sets the value of the 'f' field.
   * @param value the value to set.
   */
  public void setF(java.lang.CharSequence value) {
    this.f = value;
  }

  /**
   * Gets the value of the 'g' field.
   * @return The value of the 'g' field.
   */
  public int getG() {
    return g;
  }


  /**
   * Sets the value of the 'g' field.
   * @param value the value to set.
   */
  public void setG(int value) {
    this.g = value;
  }

  /**
   * Gets the value of the 'h' field.
   * @return The value of the 'h' field.
   */
  public java.lang.CharSequence getH() {
    return h;
  }


  /**
   * Sets the value of the 'h' field.
   * @param value the value to set.
   */
  public void setH(java.lang.CharSequence value) {
    this.h = value;
  }

  /**
   * Gets the value of the 'i' field.
   * @return The value of the 'i' field.
   */
  public java.lang.CharSequence getI() {
    return i;
  }


  /**
   * Sets the value of the 'i' field.
   * @param value the value to set.
   */
  public void setI(java.lang.CharSequence value) {
    this.i = value;
  }

  /**
   * Creates a new Type3 RecordBuilder.
   * @return A new Type3 RecordBuilder
   */
  public static Type3.Builder newBuilder() {
    return new Type3.Builder();
  }

  /**
   * Creates a new Type3 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Type3 RecordBuilder
   */
  public static Type3.Builder newBuilder(Type3.Builder other) {
    if (other == null) {
      return new Type3.Builder();
    } else {
      return new Type3.Builder(other);
    }
  }

  /**
   * Creates a new Type3 RecordBuilder by copying an existing Type3 instance.
   * @param other The existing instance to copy.
   * @return A new Type3 RecordBuilder
   */
  public static Type3.Builder newBuilder(Type3 other) {
    if (other == null) {
      return new Type3.Builder();
    } else {
      return new Type3.Builder(other);
    }
  }

  /**
   * RecordBuilder for Type3 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Type3>
    implements org.apache.avro.data.RecordBuilder<Type3> {

    private java.lang.CharSequence f;
    private int g;
    private java.lang.CharSequence h;
    private java.lang.CharSequence i;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Type3.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.f)) {
        this.f = data().deepCopy(fields()[0].schema(), other.f);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.g)) {
        this.g = data().deepCopy(fields()[1].schema(), other.g);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.h)) {
        this.h = data().deepCopy(fields()[2].schema(), other.h);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.i)) {
        this.i = data().deepCopy(fields()[3].schema(), other.i);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Type3 instance
     * @param other The existing instance to copy.
     */
    private Builder(Type3 other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.f)) {
        this.f = data().deepCopy(fields()[0].schema(), other.f);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.g)) {
        this.g = data().deepCopy(fields()[1].schema(), other.g);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.h)) {
        this.h = data().deepCopy(fields()[2].schema(), other.h);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.i)) {
        this.i = data().deepCopy(fields()[3].schema(), other.i);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'f' field.
      * @return The value.
      */
    public java.lang.CharSequence getF() {
      return f;
    }


    /**
      * Sets the value of the 'f' field.
      * @param value The value of 'f'.
      * @return This builder.
      */
    public Type3.Builder setF(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.f = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'f' field has been set.
      * @return True if the 'f' field has been set, false otherwise.
      */
    public boolean hasF() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'f' field.
      * @return This builder.
      */
    public Type3.Builder clearF() {
      f = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'g' field.
      * @return The value.
      */
    public int getG() {
      return g;
    }


    /**
      * Sets the value of the 'g' field.
      * @param value The value of 'g'.
      * @return This builder.
      */
    public Type3.Builder setG(int value) {
      validate(fields()[1], value);
      this.g = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'g' field has been set.
      * @return True if the 'g' field has been set, false otherwise.
      */
    public boolean hasG() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'g' field.
      * @return This builder.
      */
    public Type3.Builder clearG() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'h' field.
      * @return The value.
      */
    public java.lang.CharSequence getH() {
      return h;
    }


    /**
      * Sets the value of the 'h' field.
      * @param value The value of 'h'.
      * @return This builder.
      */
    public Type3.Builder setH(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.h = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'h' field has been set.
      * @return True if the 'h' field has been set, false otherwise.
      */
    public boolean hasH() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'h' field.
      * @return This builder.
      */
    public Type3.Builder clearH() {
      h = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'i' field.
      * @return The value.
      */
    public java.lang.CharSequence getI() {
      return i;
    }


    /**
      * Sets the value of the 'i' field.
      * @param value The value of 'i'.
      * @return This builder.
      */
    public Type3.Builder setI(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.i = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'i' field has been set.
      * @return True if the 'i' field has been set, false otherwise.
      */
    public boolean hasI() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'i' field.
      * @return This builder.
      */
    public Type3.Builder clearI() {
      i = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Type3 build() {
      try {
        Type3 record = new Type3();
        record.f = fieldSetFlags()[0] ? this.f : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.g = fieldSetFlags()[1] ? this.g : (java.lang.Integer) defaultValue(fields()[1]);
        record.h = fieldSetFlags()[2] ? this.h : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.i = fieldSetFlags()[3] ? this.i : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Type3>
    WRITER$ = (org.apache.avro.io.DatumWriter<Type3>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Type3>
    READER$ = (org.apache.avro.io.DatumReader<Type3>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.f);

    out.writeInt(this.g);

    out.writeString(this.h);

    out.writeString(this.i);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.f = in.readString(this.f instanceof Utf8 ? (Utf8)this.f : null);

      this.g = in.readInt();

      this.h = in.readString(this.h instanceof Utf8 ? (Utf8)this.h : null);

      this.i = in.readString(this.i instanceof Utf8 ? (Utf8)this.i : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.f = in.readString(this.f instanceof Utf8 ? (Utf8)this.f : null);
          break;

        case 1:
          this.g = in.readInt();
          break;

        case 2:
          this.h = in.readString(this.h instanceof Utf8 ? (Utf8)this.h : null);
          break;

        case 3:
          this.i = in.readString(this.i instanceof Utf8 ? (Utf8)this.i : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










